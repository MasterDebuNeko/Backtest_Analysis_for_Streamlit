# app.py (‡∏â‡∏ö‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)

# 1. Import Libraries ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import streamlit as st
import pandas as pd # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ DataFrame ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠
import numpy as np

# Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
# from utils import CustomDivergingNorm # ‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ CustomDivergingNorm ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô app.py ‡πÅ‡∏•‡πâ‡∏ß
from data_processing import calc_r_multiple_and_risk, summarize_r_multiple_stats
from plotting_equity import display_overall_equity_curve, display_equity_by_day
from plotting_streaks import display_losing_streak_analysis
from plotting_distributions import display_profit_distribution_all, display_profit_distribution_by_day
from plotting_trade_counts import display_trade_count_by_entry_day, display_trade_count_by_time_of_day
from plotting_heatmaps import display_profit_heatmap
from plotting_mfe_mae import display_mfe_mae_scatter_plots, display_mfe_histograms

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
st.set_page_config(layout="wide")

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Dashboard ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
st.title("üöÄ Backtest Analysis Dashboard ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏µ‡πà")
st.write("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Dashboard ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î! ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡πà‡∏∞")
st.markdown("---")

# --- ‡∏™‡πà‡∏ß‡∏ô UI ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Streamlit ---
st.header("1. üìÇ Data Preparation and Initial Analysis")
uploaded_file = st.file_uploader("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏µ‡πà (.xlsx)", type=["xlsx"], help="‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ 'List of trades' ‡πÅ‡∏•‡∏∞ 'Properties' ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∞")
desired_stop_loss = st.number_input("‡∏£‡∏∞‡∏ö‡∏∏ Stop Loss Percentage (‡πÄ‡∏ä‡πà‡∏ô 0.2% ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà 0.002)", min_value=0.000001, max_value=0.999999, value=0.002, step=0.0001, format="%.6f", help="‡∏Ñ‡πà‡∏≤ SL ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1")

# ‡πÉ‡∏ä‡πâ st.session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á info message ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
if 'analysis_button_pressed' not in st.session_state:
    st.session_state.analysis_button_pressed = False

if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ üöÄ", help="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SL ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", key="main_analysis_button"):
    st.session_state.analysis_button_pressed = True # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
    if uploaded_file is not None:
        try:
            # Save the uploaded file temporarily to pass its path
            # In a real-world scenario with larger files or cloud, other methods might be better
            with open("temp_uploaded_trade_list.xlsx", "wb") as f:
                f.write(uploaded_file.getbuffer())
            excel_file_path_temp = "temp_uploaded_trade_list.xlsx"

            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏µ‡πà... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡πà‡∏∞... ‚è≥"):
                trade_results_df = calc_r_multiple_and_risk(excel_file_path_temp, desired_stop_loss)
            
            st.session_state['trade_results_df'] = trade_results_df # Store in session state
            st.success("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡πà‡∏∞! üéâ")

            st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):")
            if trade_results_df is not None and not trade_results_df.empty:
                st.dataframe(trade_results_df.head())
                st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ R-Multiples ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:")
                summary_stats = summarize_r_multiple_stats(trade_results_df) # From data_processing.py
                if summary_stats:
                    col1, col2, col3 = st.columns(3)
                    stats_keys = list(summary_stats.keys())
                    
                    # Helper function for displaying metrics (could also be in utils.py if used elsewhere)
                    def display_metric_safe(column, label, value):
                        display_val = "N/A" if pd.isna(value) else (f"{value:.2f}" if isinstance(value, (float, np.floating)) else str(value))
                        column.metric(label=label, value=display_val)

                    metrics_per_col = (len(stats_keys) + 2) // 3 # Ensure it divides as evenly as possible
                    current_col_idx = 0
                    cols_ui = [col1, col2, col3]
                    for i, key in enumerate(stats_keys):
                        display_metric_safe(cols_ui[current_col_idx], key, summary_stats[key])
                        if (i + 1) % metrics_per_col == 0 and current_col_idx < 2:
                            current_col_idx += 1
                else:
                    st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á).")
            elif trade_results_df is None: # Should not happen if calc_r_multiple_and_risk always returns a df
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `calc_r_multiple_and_risk` ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DataFrame.")
            else: # trade_results_df is empty
                st.info("‚ÑπÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `calc_r_multiple_and_risk` ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ór‡∏î Exit ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á).")

        except ValueError as ve: st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Input ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {ve}")
        except RuntimeError as re: st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {re}")
        except KeyError as ke: st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {ke}.")
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
            st.exception(e) # Show full traceback for unexpected errors
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà")
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∞")
        # Reset trade_results_df if no file is uploaded to clear old results
        if 'trade_results_df' in st.session_state:
            del st.session_state['trade_results_df']


st.markdown("---")
st.caption("‚ÑπÔ∏è *‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Stop Loss ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ø' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∞*")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ---
# Check if data is processed and available in session_state
if 'trade_results_df' in st.session_state and \
   st.session_state['trade_results_df'] is not None and \
   not st.session_state['trade_results_df'].empty:

    current_df = st.session_state['trade_results_df']

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Equity Curve Analysis
    display_overall_equity_curve(current_df) # From plotting_equity.py
    display_equity_by_day(current_df)        # From plotting_equity.py
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: Losing Streak Analysis
    display_losing_streak_analysis(current_df) # From plotting_streaks.py
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: Profit(R) Distribution
    display_profit_distribution_all(current_df)    # From plotting_distributions.py
    display_profit_distribution_by_day(current_df) # From plotting_distributions.py
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 5: Trade Count by Entry Day
    display_trade_count_by_entry_day(current_df) # From plotting_trade_counts.py
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 6 & 7: Trade Count by Time of Day (Entry & Exit)
    st.header("6 & 7. ‚è∞ Trade Count by Time of Day (Entry & Exit)")
    st.markdown("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (Bin size) ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 12:00-19:30 ‡∏ô.")

    st.markdown("### 6. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (Entry Time)")
    bin_size_entry_time_input_app = st.number_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î Bin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (‡∏ô‡∏≤‡∏ó‡∏µ):",
        min_value=1, max_value=120, value=10, step=1,
        key="bin_entry_time_app", # Ensure unique key
        help="‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ, 30 ‡∏ô‡∏≤‡∏ó‡∏µ, 60 ‡∏ô‡∏≤‡∏ó‡∏µ"
    )
    display_trade_count_by_time_of_day(current_df, 'Entry Time', 'Entry Time of Day', bin_size_entry_time_input_app, "entry_app_tc")

    st.markdown("---")
    st.markdown("### 7. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏£‡∏î (Exit Time)")
    bin_size_exit_time_input_app = st.number_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î Bin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏£‡∏î (‡∏ô‡∏≤‡∏ó‡∏µ):",
        min_value=1, max_value=120, value=60, step=1,
        key="bin_exit_time_app", # Ensure unique key
        help="‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    )
    if 'Exit Time' in current_df.columns:
        display_trade_count_by_time_of_day(current_df, 'Exit Time', 'Exit Time of Day', bin_size_exit_time_input_app, "exit_app_tc")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Exit Time' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ.")
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 8 & 9: Heatmap Analysis
    st.header("8 & 9. üî• Heatmap Analysis: Profit(R) by Time and Day")
    st.markdown("Heatmap ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Profit(R), ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î, ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Profit(R) ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Bin ‡πÑ‡∏î‡πâ) ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 12:00-19:30 ‡∏ô.")

    st.markdown("### 8. Heatmap ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (Entry Time)")
    bin_size_heatmap_entry_input_app = st.number_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î Bin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heatmap ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (‡∏ô‡∏≤‡∏ó‡∏µ):",
        min_value=1, max_value=120, value=20, step=1,
        key="bin_heatmap_entry_app", # Ensure unique key
        help="‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heatmap"
    )
    # For display_profit_heatmap, the 'day_column_name_to_derive' is derived from 'time_column_name'
    display_profit_heatmap(current_df, 'Entry Time', 'Entry Day', 'Entry Time of Day', bin_size_heatmap_entry_input_app, "heatmap_entry_app")

    st.markdown("---")
    st.markdown("### 9. Heatmap ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏£‡∏î (Exit Time)")
    bin_size_heatmap_exit_input_app = st.number_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î Bin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heatmap ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏£‡∏î (‡∏ô‡∏≤‡∏ó‡∏µ):",
        min_value=1, max_value=120, value=20, step=1,
        key="bin_heatmap_exit_app", # Ensure unique key
        help="‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heatmap"
    )
    if 'Exit Time' in current_df.columns:
        # display_profit_heatmap will derive 'Exit Day' from 'Exit Time' inside the function
        # No need to create df_for_exit_heatmap_app here as the function handles copying and derivation
        display_profit_heatmap(current_df, 'Exit Time', 'Exit Day', 'Exit Time of Day', bin_size_heatmap_exit_input_app, "heatmap_exit_app")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Exit Time' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Heatmap ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ.")
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 10: MFE/MAE Scatter Plots
    display_mfe_mae_scatter_plots(current_df) # From plotting_mfe_mae.py
    st.markdown("---")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 11: MFE Histograms
    display_mfe_histograms(current_df) # From plotting_mfe_mae.py

elif st.session_state.analysis_button_pressed: # If button was pressed but data is not available/empty
    st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∞")
# else: # Initial state, button not pressed yet, no file uploaded, or after clearing results
#    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ø' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ñ‡∏∞")
